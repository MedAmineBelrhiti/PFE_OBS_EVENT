/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.orange.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.orange.model.EvenementObs;
import com.orange.model.EvenementObsModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EvenementObs service. Represents a row in the &quot;OBS_EvenementObs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EvenementObsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EvenementObsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EvenementObsImpl
 * @generated
 */
@JSON(strict = true)
public class EvenementObsModelImpl
	extends BaseModelImpl<EvenementObs> implements EvenementObsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a evenement obs model instance should use the <code>EvenementObs</code> interface instead.
	 */
	public static final String TABLE_NAME = "OBS_EvenementObs";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"idEvent", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"lieu", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"votingEndDate", Types.TIMESTAMP}, {"nbrUserMax", Types.INTEGER},
		{"nbrUserConfirmed", Types.INTEGER}, {"entity", Types.VARCHAR},
		{"managerName", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("idEvent", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lieu", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("votingEndDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nbrUserMax", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("nbrUserConfirmed", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("entity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table OBS_EvenementObs (uuid_ VARCHAR(75) null,idEvent LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,startDate DATE null,endDate DATE null,lieu VARCHAR(75) null,description VARCHAR(75) null,votingEndDate DATE null,nbrUserMax INTEGER,nbrUserConfirmed INTEGER,entity VARCHAR(75) null,managerName VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table OBS_EvenementObs";

	public static final String ORDER_BY_JPQL =
		" ORDER BY evenementObs.idEvent ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY OBS_EvenementObs.idEvent ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long IDEVENT_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EvenementObsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _idEvent;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIdEvent(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _idEvent;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EvenementObs.class;
	}

	@Override
	public String getModelClassName() {
		return EvenementObs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EvenementObs, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EvenementObs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EvenementObs, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EvenementObs)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EvenementObs, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EvenementObs, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EvenementObs)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EvenementObs, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EvenementObs, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<EvenementObs, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EvenementObs, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EvenementObs, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<EvenementObs, Object>>();
		Map<String, BiConsumer<EvenementObs, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EvenementObs, ?>>();

		attributeGetterFunctions.put("uuid", EvenementObs::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<EvenementObs, String>)EvenementObs::setUuid);
		attributeGetterFunctions.put("idEvent", EvenementObs::getIdEvent);
		attributeSetterBiConsumers.put(
			"idEvent",
			(BiConsumer<EvenementObs, Long>)EvenementObs::setIdEvent);
		attributeGetterFunctions.put("groupId", EvenementObs::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<EvenementObs, Long>)EvenementObs::setGroupId);
		attributeGetterFunctions.put("companyId", EvenementObs::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EvenementObs, Long>)EvenementObs::setCompanyId);
		attributeGetterFunctions.put("createDate", EvenementObs::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EvenementObs, Date>)EvenementObs::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EvenementObs::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EvenementObs, Date>)EvenementObs::setModifiedDate);
		attributeGetterFunctions.put("startDate", EvenementObs::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<EvenementObs, Date>)EvenementObs::setStartDate);
		attributeGetterFunctions.put("endDate", EvenementObs::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<EvenementObs, Date>)EvenementObs::setEndDate);
		attributeGetterFunctions.put("lieu", EvenementObs::getLieu);
		attributeSetterBiConsumers.put(
			"lieu", (BiConsumer<EvenementObs, String>)EvenementObs::setLieu);
		attributeGetterFunctions.put(
			"description", EvenementObs::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<EvenementObs, String>)EvenementObs::setDescription);
		attributeGetterFunctions.put(
			"votingEndDate", EvenementObs::getVotingEndDate);
		attributeSetterBiConsumers.put(
			"votingEndDate",
			(BiConsumer<EvenementObs, Date>)EvenementObs::setVotingEndDate);
		attributeGetterFunctions.put("nbrUserMax", EvenementObs::getNbrUserMax);
		attributeSetterBiConsumers.put(
			"nbrUserMax",
			(BiConsumer<EvenementObs, Integer>)EvenementObs::setNbrUserMax);
		attributeGetterFunctions.put(
			"nbrUserConfirmed", EvenementObs::getNbrUserConfirmed);
		attributeSetterBiConsumers.put(
			"nbrUserConfirmed",
			(BiConsumer<EvenementObs, Integer>)
				EvenementObs::setNbrUserConfirmed);
		attributeGetterFunctions.put("entity", EvenementObs::getEntity);
		attributeSetterBiConsumers.put(
			"entity",
			(BiConsumer<EvenementObs, String>)EvenementObs::setEntity);
		attributeGetterFunctions.put(
			"managerName", EvenementObs::getManagerName);
		attributeSetterBiConsumers.put(
			"managerName",
			(BiConsumer<EvenementObs, String>)EvenementObs::setManagerName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getIdEvent() {
		return _idEvent;
	}

	@Override
	public void setIdEvent(long idEvent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_idEvent = idEvent;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endDate = endDate;
	}

	@JSON
	@Override
	public String getLieu() {
		if (_lieu == null) {
			return "";
		}
		else {
			return _lieu;
		}
	}

	@Override
	public void setLieu(String lieu) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lieu = lieu;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public Date getVotingEndDate() {
		return _votingEndDate;
	}

	@Override
	public void setVotingEndDate(Date votingEndDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_votingEndDate = votingEndDate;
	}

	@JSON
	@Override
	public int getNbrUserMax() {
		return _nbrUserMax;
	}

	@Override
	public void setNbrUserMax(int nbrUserMax) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nbrUserMax = nbrUserMax;
	}

	@JSON
	@Override
	public int getNbrUserConfirmed() {
		return _nbrUserConfirmed;
	}

	@Override
	public void setNbrUserConfirmed(int nbrUserConfirmed) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nbrUserConfirmed = nbrUserConfirmed;
	}

	@JSON
	@Override
	public String getEntity() {
		if (_entity == null) {
			return "";
		}
		else {
			return _entity;
		}
	}

	@Override
	public void setEntity(String entity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_entity = entity;
	}

	@JSON
	@Override
	public String getManagerName() {
		if (_managerName == null) {
			return "";
		}
		else {
			return _managerName;
		}
	}

	@Override
	public void setManagerName(String managerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerName = managerName;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(EvenementObs.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EvenementObs.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EvenementObs toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EvenementObs>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EvenementObsImpl evenementObsImpl = new EvenementObsImpl();

		evenementObsImpl.setUuid(getUuid());
		evenementObsImpl.setIdEvent(getIdEvent());
		evenementObsImpl.setGroupId(getGroupId());
		evenementObsImpl.setCompanyId(getCompanyId());
		evenementObsImpl.setCreateDate(getCreateDate());
		evenementObsImpl.setModifiedDate(getModifiedDate());
		evenementObsImpl.setStartDate(getStartDate());
		evenementObsImpl.setEndDate(getEndDate());
		evenementObsImpl.setLieu(getLieu());
		evenementObsImpl.setDescription(getDescription());
		evenementObsImpl.setVotingEndDate(getVotingEndDate());
		evenementObsImpl.setNbrUserMax(getNbrUserMax());
		evenementObsImpl.setNbrUserConfirmed(getNbrUserConfirmed());
		evenementObsImpl.setEntity(getEntity());
		evenementObsImpl.setManagerName(getManagerName());

		evenementObsImpl.resetOriginalValues();

		return evenementObsImpl;
	}

	@Override
	public EvenementObs cloneWithOriginalValues() {
		EvenementObsImpl evenementObsImpl = new EvenementObsImpl();

		evenementObsImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		evenementObsImpl.setIdEvent(
			this.<Long>getColumnOriginalValue("idEvent"));
		evenementObsImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		evenementObsImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		evenementObsImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		evenementObsImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		evenementObsImpl.setStartDate(
			this.<Date>getColumnOriginalValue("startDate"));
		evenementObsImpl.setEndDate(
			this.<Date>getColumnOriginalValue("endDate"));
		evenementObsImpl.setLieu(this.<String>getColumnOriginalValue("lieu"));
		evenementObsImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		evenementObsImpl.setVotingEndDate(
			this.<Date>getColumnOriginalValue("votingEndDate"));
		evenementObsImpl.setNbrUserMax(
			this.<Integer>getColumnOriginalValue("nbrUserMax"));
		evenementObsImpl.setNbrUserConfirmed(
			this.<Integer>getColumnOriginalValue("nbrUserConfirmed"));
		evenementObsImpl.setEntity(
			this.<String>getColumnOriginalValue("entity"));
		evenementObsImpl.setManagerName(
			this.<String>getColumnOriginalValue("managerName"));

		return evenementObsImpl;
	}

	@Override
	public int compareTo(EvenementObs evenementObs) {
		long primaryKey = evenementObs.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EvenementObs)) {
			return false;
		}

		EvenementObs evenementObs = (EvenementObs)object;

		long primaryKey = evenementObs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EvenementObs> toCacheModel() {
		EvenementObsCacheModel evenementObsCacheModel =
			new EvenementObsCacheModel();

		evenementObsCacheModel.uuid = getUuid();

		String uuid = evenementObsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			evenementObsCacheModel.uuid = null;
		}

		evenementObsCacheModel.idEvent = getIdEvent();

		evenementObsCacheModel.groupId = getGroupId();

		evenementObsCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			evenementObsCacheModel.createDate = createDate.getTime();
		}
		else {
			evenementObsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			evenementObsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			evenementObsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			evenementObsCacheModel.startDate = startDate.getTime();
		}
		else {
			evenementObsCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			evenementObsCacheModel.endDate = endDate.getTime();
		}
		else {
			evenementObsCacheModel.endDate = Long.MIN_VALUE;
		}

		evenementObsCacheModel.lieu = getLieu();

		String lieu = evenementObsCacheModel.lieu;

		if ((lieu != null) && (lieu.length() == 0)) {
			evenementObsCacheModel.lieu = null;
		}

		evenementObsCacheModel.description = getDescription();

		String description = evenementObsCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			evenementObsCacheModel.description = null;
		}

		Date votingEndDate = getVotingEndDate();

		if (votingEndDate != null) {
			evenementObsCacheModel.votingEndDate = votingEndDate.getTime();
		}
		else {
			evenementObsCacheModel.votingEndDate = Long.MIN_VALUE;
		}

		evenementObsCacheModel.nbrUserMax = getNbrUserMax();

		evenementObsCacheModel.nbrUserConfirmed = getNbrUserConfirmed();

		evenementObsCacheModel.entity = getEntity();

		String entity = evenementObsCacheModel.entity;

		if ((entity != null) && (entity.length() == 0)) {
			evenementObsCacheModel.entity = null;
		}

		evenementObsCacheModel.managerName = getManagerName();

		String managerName = evenementObsCacheModel.managerName;

		if ((managerName != null) && (managerName.length() == 0)) {
			evenementObsCacheModel.managerName = null;
		}

		return evenementObsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EvenementObs, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EvenementObs, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EvenementObs, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((EvenementObs)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EvenementObs>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					EvenementObs.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _idEvent;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _startDate;
	private Date _endDate;
	private String _lieu;
	private String _description;
	private Date _votingEndDate;
	private int _nbrUserMax;
	private int _nbrUserConfirmed;
	private String _entity;
	private String _managerName;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EvenementObs, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EvenementObs)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("idEvent", _idEvent);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("startDate", _startDate);
		_columnOriginalValues.put("endDate", _endDate);
		_columnOriginalValues.put("lieu", _lieu);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("votingEndDate", _votingEndDate);
		_columnOriginalValues.put("nbrUserMax", _nbrUserMax);
		_columnOriginalValues.put("nbrUserConfirmed", _nbrUserConfirmed);
		_columnOriginalValues.put("entity", _entity);
		_columnOriginalValues.put("managerName", _managerName);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("idEvent", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("startDate", 64L);

		columnBitmasks.put("endDate", 128L);

		columnBitmasks.put("lieu", 256L);

		columnBitmasks.put("description", 512L);

		columnBitmasks.put("votingEndDate", 1024L);

		columnBitmasks.put("nbrUserMax", 2048L);

		columnBitmasks.put("nbrUserConfirmed", 4096L);

		columnBitmasks.put("entity", 8192L);

		columnBitmasks.put("managerName", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EvenementObs _escapedModel;

}